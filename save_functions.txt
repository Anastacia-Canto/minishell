void	get_args_len(t_heredoc *file, char **line, char *str)
{
	file->index = 0;
	file->direction_len = 0;
	file->args_len = 0;
	while (line[file->index])
	{
		if (!ft_directcmp(line[file->index], str) && line[file->index])
			file->direction_len += 1;
		else
			file->args_len += 1;
		file->index++;
	}
	file->args_len -= file->direction_len;
}

void	ft_greater(char **line, int *pd)
{
	t_heredoc	file;
	int			fd;

	data()->break_flg = 1;
	file.tmpout = dup(1);
	divide_args(line, &file, ">");
	file.index = 0;
	while (file.files[file.index + 1])
	{
		fd = open(file.files[file.index++], O_RDWR | O_CREAT, S_IRWXU);
		close(fd);
	}
	file.fd1 = open(file.files[file.index], O_RDWR
			| O_CREAT | O_TRUNC, S_IRWXU);
	dup2(file.fd1, 1);
	to_builtins(file.print_args, 1, pd);
	close(file.fd1);
	dup2(file.tmpout, 1);
	free_array(file.print_args);
	free_array(file.files);
}

void	ft_double_greater(char **line, int *pd)
{
	t_heredoc	file;
	int			fd;

	data()->break_flg = 1;
	file.tmpout = dup(1);
	divide_args(line, &file, ">>");
	file.index = 0;
	while (file.files[file.index + 1])
	{
		fd = open(file.files[file.index++], O_RDWR | O_CREAT, S_IRWXU);
		close(fd);
	}
	file.fd1 = open(file.files[file.index], O_CREAT
			| O_RDWR | O_APPEND, S_IRWXU);
	if (file.fd1 < 0)
		return ;
	dup2(file.fd1, 1);
	to_builtins(file.print_args, 1, pd);
	dup2(file.tmpout, 1);
	close(file.fd1);
	free_array(file.print_args);
	free_array(file.files);
}

void	ft_less(char **line, int *pd)
{
	t_heredoc	file;

	file.tmpin = dup(0);
	data()->break_flg = 1;
	divide_args(line, &file, "<");
	file.index = 0;
	while (file.files[file.index + 1])
		file.index++;
	file.fd1 = open(file.files[file.index], O_RDONLY, 0777);
	if (file.fd1 < 0)
	{
		// printf("%s: No such file or directory\n", file.files[file.index]);
		write(2, ": No such file or directory\n", 28);
		free_array(file.print_args);
		free_array(file.files);
		return ;
	}
	else
	{
		dup2(file.fd1, 0);
		to_builtins(file.print_args, 1, pd);
		dup2(file.tmpin, 0);
		close(file.fd1);
	}
	free_array(file.print_args);
	free_array(file.files);
}

int	check_here_args(t_heredoc *file)
{
	if (!ft_directcmp(file->files[file->index], file->line2))
	{
		data()->stop_wr = 1;
		file->index++;
	}
	if (!file->files[file->index])
		return (0);
	return (1);
}

void	ft_double_less(char **line, int *pd)
{
	t_heredoc	file;
	char		*temp;

	data()->break_flg = 1;
	file.tmpin = dup(0);
	divide_args(line, &file, "<<");
	file.fd1 = open(".heredoc.txt", O_CREAT | O_RDWR, 0777);
	file.line2 = readline(">");
	file.index = 0;
	while (check_here_args(&file))
	{
		if (!data()->stop_wr)
			save_heredoc(file.line2, file.fd1);
		free(file.line2);
		file.line2 = readline(">");
	}
	free(file.line2);
	close(file.fd1);
	file.fd1 = open(".heredoc.txt", O_CREAT | O_RDWR, 0777);
	dup2(file.fd1, 0);
	to_builtins(file.print_args, 1, pd);
	dup2(file.tmpin, 0);
	temp = get_pfile(".heredoc.txt");
	if (!temp)
		return ;
	if (access(temp, F_OK) == 0)
		unlink(temp);
	close(file.fd1);
	free_array(file.print_args);
	free_array(file.files);
	data()->stop_wr = 0;
}


------------------------------------------------------------------------------------------------------------


char	*get_pfile(char *line)
{
	char	*path;
	char	*temp;

	path = NULL;
	path = getcwd(path, 0);
	if (!path)
		return (NULL);
	temp = ft_strdup(path);
	temp = ft_strjoin(temp, "/");
	temp = ft_strjoin(temp, line);
	free(path);
	return (temp);
}

void	get_args(char **line, t_heredoc *file, char *str)
{
	file->index = 0;
	file->iargs = 0;
	file->idir = 0;
	file->files = malloc(sizeof(char *) * (file->direction_len + 1));
	file->print_args = malloc(sizeof(char *) * (file->args_len + 1));
	while (line[file->index])
	{
		if (!ft_directcmp(line[file->index], str))
		{
			if (!line[file->index++])
				break ;
			file->files[file->idir++] = ft_strdup(line[file->index]);
		}
		else
			file->print_args[file->iargs++] = ft_strdup(line[file->index]);
		file->index++;
	}
	file->files[file->idir] = 0;
	file->print_args[file->iargs] = 0;
}

int	ft_directcmp(char *line, char *cmp)
{
	int	index;

	index = 0;
	if (!line || !cmp)
		return (127);
	while (line[index] == cmp[index])
	{
		if (!line[index + 1])
			return (0);
		index++;
	}
	return (1);
}

void	save_heredoc(char *line, int fd)
{
	int	index;

	index = 0;
	while (line[index])
	{
		write(fd, &line[index], 1);
		index++;
	}
	write(fd, "\n", 1);
}

void	divide_args(char **line, t_heredoc *file, char *str)
{
	get_args_len(file, line, str);
	get_args(line, file, str);
}

------------------------------------------------------------------------------------------------------------


while (line[file.index])
	{
		if (!ft_directcmp(line[file.index], ">"))
			ft_greater(line, pd);
		else if (!ft_directcmp(line[file.index], ">>"))
			ft_double_greater(line, pd);
		else if (!ft_directcmp(line[file.index], "<"))
			ft_less(line, pd);
		else if (!ft_directcmp(line[file.index], "<<"))
			ft_double_less(line, pd);
		file.index++;
	}